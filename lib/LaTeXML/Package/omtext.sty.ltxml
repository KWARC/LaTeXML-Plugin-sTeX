# -*- mode: Perl -*-
# /=====================================================================\ #

# | sTeX implementation for LaTeXML (omtext.sty)                        | #
# | http://github.com/sLaTeX/LaTeXML-Plugin-sTeX/                       | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2019.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <michael.kohlhase@fau.de>                  #_#     | #
# | http://github.com/sLaTeX/sTeX                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use LaTeXML::Util::Pathname;

# =======================================================
# 0. Options handling:                                  #
# =======================================================
DeclareOption('mh', sub { AssignValue ('@omtext' => 1,'global');
PassOptions('modules','sty',ToString(Digest(T_CS('\CurrentOption')))); });
DeclareOption('omdocmode', sub {AssignValue ('@omdocmode' => 1)});
DeclareOption('noindex','');
DeclareOption(undef,sub {PassOptions('modules','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();

# =======================================================
# 1. Requirements:                                      #
# =======================================================
if(LookupValue('@omtext')) {RequirePackage('omtext-mh');}
RequirePackage('xspace');
RequirePackage('modules');
RequirePackage('lxRDFa');
RequirePackage('latexsym');

# =======================================================
# 2. Mathematical Text:                                 #
# =======================================================
Tag('omdoc:metadata',afterOpen=>\&numberIt,afterClose=>\&locateIt,autoClose=>1,autoOpen=>1);
Tag('omdoc:CMP', afterOpen => sub {AssignValue('_LastSeenCMP', $_[1], 'global');return;});
DefParameterType('IfBeginFollows', sub {
   my ($gullet) = @_;
   $gullet->skipSpaces;
                   my $next = $gullet->readToken;
                   $gullet->unread($next);
                   $next = ToString($next);
                   #Hm, falling back to regexp handling, the $gullet->ifNext approach didn't work properly
                   return 1 unless ($next=~/^\\begin/);
                   return;
                 },
 reversion=>'', optional=>1);
DefKeyVal('omtext','functions','CommaList');
DefKeyVal('omtext','display','Semiverbatim');
DefKeyVal('omtext','for','Semiverbatim');
DefKeyVal('omtext','from','Semiverbatim');
DefKeyVal('omtext','type','Semiverbatim');
DefKeyVal('omtext','title','Plain'); #Math mode in titles.
DefKeyVal('omtext','start','Plain'); #Math mode in start phrases
DefKeyVal('omtext','theory','Semiverbatim');
DefKeyVal('omtext','continues','Semiverbatim');
DefKeyVal('omtext','verbalizes','Semiverbatim');

# =======================================================
# 2. Core omtext:                                       #
# =======================================================
DefEnvironment('{omtext} OptionalKeyVals:omtext',
  "<omdoc:omtext "
     . "?&GetKeyVal(#1,'id')(xml:id='&GetKeyVal(#1,'id')')() "
     . "?&GetKeyVal(#1,'type')(type='&GetKeyVal(#1,'type')')() "
     . "?&GetKeyVal(#1,'for')(for='&GetKeyVal(#1,'for')')() "
             . "?&GetKeyVal(#1,'from')(from='&GetKeyVal(#1,'from')')()>"
  . "?&GetKeyVal(#1,'title')(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
  .     "?&GetKeyVal(#1,'start')(<ltx:text class='startemph'>&GetKeyVal(#1,'start')</ltx:text>)()"
                  .     "#body"
                 ."</omdoc:omtext>",  afterDigestBegin=>\&declareFunctions,);

# =======================================================
# 3. Phrase-Level Markup:                               #
# =======================================================
DefKeyVal('phrase','id','Semiverbatim');
DefKeyVal('phrase','style','Semiverbatim');
DefKeyVal('phrase','class','Semiverbatim');
DefKeyVal('phrase','index','Semiverbatim');
DefKeyVal('phrase','verbalizes','Semiverbatim');
DefKeyVal('phrase','type','Semiverbatim');
DefKeyVal('phrase','only','Semiverbatim');
DefConstructor('\phrase OptionalKeyVals:phrase {}',
       "<ltx:text %&GetKeyVals(#1) ?&GetKeyVal(#1,'only')(rel='beamer:only' content='&GetKeyVal(#1,'only')')()>#2</ltx:text>");
DefConstructor('\textsubscript{}', "<ltx:sub>#1</ltx:sub>",mode => 'text');
DefConstructor('\corefs{}{}',
  "<ltx:text class='coref-source' stex:index='#2'>#1</ltx:text>");
DefConstructor('\coreft{}{}',
  "<ltx:text class='coref-target' stex:index='#2'>#1</ltx:text>");
DefConstructor('\nlex{}',"<ltx:text class='nlex'>#1</ltx:text>");
DefConstructor('\nlcex{}',"<ltx:text class='nlcex'>#1</ltx:text>");
DefConstructor('\sinlinequote [] {}',
              "<ltx:quote type='inlinequote'>"
               . "?#1(<dc:source>#1</dc:source>\n)()"
               . "#2"
            . "</ltx:quote>");

# =======================================================
# 3. Block-Level Markup:                                #
# =======================================================
DefEnvironment('{sblockquote} []',
  "<ltx:quote>?#1(<ltx:note role='source'>#1</ltx:note>)()#body</ltx:quote>");
DefEnvironment('{sboxquote} []',
  "<ltx:quote class='boxed'>?#1(<ltx:note role='source'>#1</ltx:note>)()#body</ltx:quote>");
DefConstructor('\lec{}',
   LookupValue('@omdocmode') ? "\n<omdoc:note type='line-end-comment'>#1</omdoc:note>" : 
   "\n<ltx:inline-block class='omdoc_note' stex:type='line-end-comment'>#1</ltx:inline-block>");

# =======================================================
# 4. Index Markup:                                      #
# =======================================================
DefConstructor('\indexalt[]{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\indextoo[]{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\twinalt[]{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\twintoo[]{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2 #3</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\atwinalt[]{}{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .    "<omdoc:idp>#4</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
DefConstructor('\atwintoo[]{}{}{}',
       "<omdoc:idx>"
      .  "<omdoc:idt>#2 #3</omdoc:idt>"
      .  "<omdoc:ide ?#1(sort-by='#1')()>"
      .    "<omdoc:idp>#2</omdoc:idp>"
      .    "<omdoc:idp>#3</omdoc:idp>"
      .    "<omdoc:idp>#4</omdoc:idp>"
      .  "</omdoc:ide>"
      ."</omdoc:idx>");
Tag('omdoc:CMP', autoClose=>1, autoOpen=>1);
Tag('omdoc:omtext', autoClose=>1, autoOpen=>1);
Tag('ltx:p', autoClose=>1, autoOpen=>1);
DefConstructor('\footnote[]{}',
       LookupValue('@omdocmode') ? "<omdoc:note type='foot' ?#1(mark='#1')>#2</omdoc:note>" :
        "<ltx:inline-block class='omdoc_note' stex:type='foot' ?#1(mark='#1')>#2</ltx:inline-block>"
       );
DefConstructor('\footnotemark[]',"");
DefConstructor('\footnotetext[]{}',
       LookupValue('@omdocmode') ? "<omdoc:note class='foot' ?#1(mark='#1')>#2</omdoc:note>" : 
        "<ltx:inline-block class='omdoc_note foot' ?#1(mark='#1')>#2</ltx:inline-block>"
       );
Tag('omdoc:omtext',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:omgroup',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:CMP',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:idx',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ide',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:idt',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:note',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:metadata',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:meta',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:resource',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:recurse',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:imports',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:theory',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ignore',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('omdoc:ref',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:p',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:tabular',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:thead',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:td',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:tr',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:caption',afterOpen=>\&numberIt,afterClose=>\&locateIt);
Tag('ltx:Math',afterOpen=>\&numberIt,afterClose=>\&locateIt);


# =======================================================
# 5. Miscellaneous:                                     #
# =======================================================
DefMacro('\hateq','\@hateq\xspace');
DefConstructor('\@hateq',"\x{2259}");
DefMacro('\hatequiv','\@hatequiv\xspace');
DefConstructor('\@hatequiv',"\x{2A6F}");
DefMacro('\ergo','\@ergo\xspace');
DefConstructor('\@ergo',"\x{219D}");
DefMacro('\ogre','\@ogre\xspace');
DefConstructor('\@ogre',"\x{2B3F}");

# experimental: Declarations 
DefConstructor('\vdec [] {}',
     LookupValue('@omdocmode') ? "<omdoc:declaration ?#1(for='#1')()>#2</omdoc:declaration>" :
       "<ltx:inline-block class='omdoc_declaration' ?#1(stex:for='#1')()>#2</ltx:inline-block>"
     );
DefConstructor('\vcond []{}',
	       "<omdoc:identifiers ?#1(for='#1')()>#2</omdoc:identifiers>");
DefConstructor('\vrest [] {}',
	       "<omdoc:restriction ?#1(for='#1')()>#2</omdoc:restriction>");
DefConstructor('\strucdec [] {}',
   LookupValue('@omdocmode') ? "<omdoc:declaration role='structure' name='#1'>#2</omdoc:declaration>" :
       "<ltx:inline-block class='omdoc_declaration' stex:role='structure' stex:name='#1'>#2</ltx:inline-block>"
   );  
DefConstructor('\impdec {}',
   LookupValue('@omdocmode') ? "<omdoc:declaration role='imports'>#1</omdoc:declaration>" :
       "<ltx:inline-block class='omdoc_declaration' stex:role='imports'>#1</ltx:inline-block>"
   );  
1;
