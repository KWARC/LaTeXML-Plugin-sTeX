# -*- mode: Perl -*-
# /=====================================================================\ #
# | sTeX implementation for LaTeXML (stex-logo.sty)                     | #
# | http://github.com/sLaTeX/LaTeXML-Plugin-sTeX/                       | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2019.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <michael.kohlhase@fau.de>                  #_#     | #
# | http://github.com/sLaTeX/sTeX                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
# we are running LaTeXML. 
RawTeX('\newif\if@latexml\@latexmltrue');

RegisterNamespace('stex',"http://kwarc.info/ns/sTeX");
RegisterDocumentNamespace('stex',"http://kwarc.info/ns/sTeX");
RegisterNamespace('dc',"http://purl.org/dc/elements/1.1/");
RegisterDocumentNamespace('dc',"http://purl.org/dc/elements/1.1/");

sub numberIt {
  my($document,$node,$whatsit)=@_;
  my(@parents)=$document->findnodes('ancestor::*[@xml:id]',$node);
  my $prefix= (@parents ? $parents[$#parents]->getAttribute('xml:id')."." : '');
  my(@siblings)=$document->findnodes('preceding-sibling::*[@xml:id]',$node);
  my $n = scalar(@siblings)+1;
  my $id = ($node -> getAttribute('xml:id'));
  my $localname = $node->localname;
  $node->setAttribute('xml:id'=>$prefix."$localname$n") unless $id;
  my $about = $node -> getAttribute('about');
  $node->setAttribute('about'=>'#'.$node->getAttribute('xml:id')) unless $about;
  #Also, provide locators:
  my $locator;
  if ($whatsit) {
    if (my $locator_prop = $whatsit->getProperty('locator')) {
      $locator = $locator_prop->toAttribute; } }
  # Bootstrap: inherit locators, if none provided explicitly
  if (!$locator) {
    $locator = (@parents ? $parents[$#parents]->getAttribute('stex:srcref') : ''); }

  # If we managed to obtain a locator, serialize it on the document  
  if ($locator) {
    # There is a BUG with namespace declarations (or am I using the API wrongly??) which
    # does not recognize the stex namespace. Hence, I need to redeclare it...
    my $parent=$document->getNode;
    if(! defined $parent->lookupNamespacePrefix("http://kwarc.info/ns/sTeX"))
      { # namespace not already declared?
        $document->getDocument->documentElement->setNamespace("http://kwarc.info/ns/sTeX","stex",0);
      }
    $node->setAttribute('stex:srcref'=>$locator);
  }
  return; }

sub locateIt {
  my($document,$node,$whatsit)=@_;
  #Estimate trailer and locator:
  my $locator = $node->getAttribute('stex:srcref');
  return unless $locator; # Nothing to do here...
  my $trailer = $whatsit && $whatsit->getProperty('trailer');
  if ($trailer) {
    if (my $locator = $trailer->getLocator) {
      $trailer = $locator->toAttribute; } }
  # No explicit trailer, can we use the locator of the last child box?
  # ... not quite, as it is not precise enough, text nodes don't record their whatsits for instance
  # so instead, focus on the srcref attribute
  if (!$trailer) { 
    my $last_node = $node->lastChild;
    my $last_locator = (ref $last_node eq 'XML::LibXML::Element') && $last_node->getAttribute('stex:srcref');
    while ($last_node && !$last_locator) {
      $last_node = $last_node->previousNonBlankSibling; 
      $last_locator = (ref $last_node eq 'XML::LibXML::Element') && $last_node->getAttribute('stex:srcref'); }
    if ($last_locator) {
      $trailer = $last_locator; } }
  # if no trailer after all, just use the locator as a fallback, could be atomic
  if (!$trailer) {
    $trailer = $locator; }
  
  # TODO: Both should be local, or both remote, any mixture or undefinedness will produce garbage
  my $file_path = LookupValue('SOURCEFILE');
  my $baselocal = LookupValue('BASELOCAL');
  # Hmm, we only care about relative paths, so let's just do a URL->pathname map
  $file_path=~s/^\w+\:\/// if $file_path;
  $baselocal=~s/^\w+\:\/// if $baselocal;

  if ($file_path && $baselocal && ($locator =~ s/^([^\#]+)\#/\#/)) {
    my $relative_path = pathname_relative($file_path,$baselocal);
    $locator = $relative_path.$locator; }
  
  if ($locator =~ /^(.+from=\d+;\d+)/) {
    my $from = $1;
    if ($trailer =~ /(,to=\d+;\d+.+)$/) {
      my $to = $1;
      $locator = $from.$to; }
    else { Error("stex","locator",undef, "Trailer is garbled, expect nonsense in stex:srcref ..."); } }
  else { Error("stex","locator",undef, "Locator \"$locator\" is garbled, expect nonsense in stex:srcref ..."); }

  my $parent = $document->getNode;
  if(! defined $parent->lookupNamespacePrefix("http://kwarc.info/ns/sTeX"))
    { # namespace not already declared?
      $document->getDocument->documentElement->setNamespace("http://kwarc.info/ns/sTeX","stex",0);
    }
  $node->setAttribute('stex:srcref' => $locator);
  return;
}

1;
