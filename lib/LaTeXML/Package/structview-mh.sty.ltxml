# -*- mode: Perl -*-
# /=====================================================================\ #
# | sTeX implementation for LaTeXML (structview-mh.sty)                 | #
# | http://github.com/sLaTeX/LaTeXML-Plugin-sTeX/                       | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2019.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <michael.kohlhase@fau.de>                  #_#     | #
# | http://github.com/sLaTeX/sTeX                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use LaTeXML::Util::Pathname;

# =======================================================
# -1. Requirements:                                     #
# =======================================================

RequirePackage('mathhub');

# =======================================================
# 0. Introduce parameters:                              #
# =======================================================

DefKeyVal('mhview','id','Semiverbatim');
DefKeyVal('mhview','display','Semiverbatim');
DefKeyVal('mhview','creators','Semiverbatim');
DefKeyVal('mhview','contributors','Semiverbatim');
DefKeyVal('mhview','srccite','Semiverbatim');
DefKeyVal('mhview','title','Semiverbatim');
DefKeyVal('mhview','type','Semiverbatim');
DefKeyVal('mhview','fromrepos','Semiverbatim');
DefKeyVal('mhview','torepos','Semiverbatim');
DefKeyVal('mhview','frompath','Semiverbatim');
DefKeyVal('mhview','topath','Semiverbatim');
DefKeyVal('mhview','ext','Semiverbatim');

# =======================================================
# 1. Structures
# =======================================================

DefMacro('\mhstructure [] Semiverbatim Semiverbatim',
         '\endgroup\importMHmoduleI[#1]{#3}\begin{structurenv}[#1]{#2}{#3}');
DefMacroI('\end{mhstructure}',undef,'\end{structurenv}');

# =======================================================
# 2. Views
# =======================================================

DefMacroI(T_CS('\begin{mhview}'),'OptionalKeyVals:mhview {}{}', sub {
  my ($gullet, $keyvals, $from_arg, $to_arg) = @_;
  my $from = ToString(Digest($from_arg));
  my $to = ToString(Digest($to_arg));
  my $id = ToString(GetKeyVal($keyvals, 'id'));
  my $test = $keyvals->getValue('id');
  # if $from or $to contains doesn't contian '@' then
  # we need to store the loading info
  if ($from =~ /views/ && $to =~ /views/) {
      $from = LookupValue($from);
      $to = LookupValue($to);
  } else {
      AssignValue('views@' . $id . '@from' => $from, 'global');
      AssignValue('views@' . $id . '@to' => $to, 'global');
  }
  AssignValue(from_module => $from);
  AssignValue(to_module => $to);
  my $from_repos = ToString(GetKeyVal($keyvals,'fromrepos'));
  my $to_repos = ToString(GetKeyVal($keyvals,'torepos'));
  my $repos = LookupValue('current_repos');
  my $from_path = ToString(GetKeyVal($keyvals,'frompath'));
  my $to_path = ToString(GetKeyVal($keyvals,'topath'));
  my $ext = ToString(GetKeyVal($keyvals,'ext')) if $keyvals;
  $ext = 'sms' unless $ext;
  my $current_repos = LookupValue('current_repos');
  if (!$from_repos) { $from_repos = $current_repos; }
  if (!$to_repos) { $to_repos = $current_repos; }
  return (
    Tokenize("\\importMHmoduleI[repos=$from_repos,path=$from_path,ext=$ext]{$from}")->unlist,
    Tokenize("\\importMHmoduleI[repos=$to_repos,path=$to_path,ext=$ext]{$to}")->unlist,
    Invocation(T_CS('\begin{viewenv}'),$keyvals,$from_arg,$to_arg)->unlist
  );
});
DefMacroI('\end{mhview}',undef,'\end{viewenv}');
RawTeX('
\newenvironment{mhviewsketch}[3][]%
{\PackageError{structview}%
  {The {mhviewsketch} environment is deprecated}{use the {mhview} instead!}%
  \begin{mhview}[#1]{#2}{#3}}
{\end{mhview}}
');

DefConstructor('\mhinlineview OptionalKeyVals:omtext {} {}',
              "<ltx:text class='view' "
            .    "?&GetKeyVal(#1,'id')(id='&GetKeyVal(#1,'id')')() "
            .    "?&GetKeyVal(#1,'frompath')(stex:from='?&GetKeyVal(#1,'fromrepos')(&GetKeyVal(#1,'fromrepos')/source/)()&GetKeyVal(#1,'frompath')')() "
            .    "?&GetKeyVal(#1,'type')(stex:type='&GetKeyVal(#1,'type')')() "
            .    "?&GetKeyVal(#1,'creators')(dc:creators='&GetKeyVal(#1,'creators')')() "
            .    "?&GetKeyVal(#1,'contributors')(dc:contributors='&GetKeyVal(#1,'contributors')')() "
            .    "?&GetKeyVal(#1,'display')(style='display:&GetKeyVal(#1,'display')')() "
	    .    "from='#2'>"
            .    "#3"
            . "</ltx:text>");

DefEnvironment('{mhinlineView} OptionalKeyVals:omtext {}',
	       "<ltx:inline-para class='view' "
            .    "?&GetKeyVal(#1,'id')(id='&GetKeyVal(#1,'id')')() "
            .    "?&GetKeyVal(#1,'frompath')(stex:from='?&GetKeyVal(#1,'fromrepos')(&GetKeyVal(#1,'fromrepos')/source/)()&GetKeyVal(#1,'frompath')')() "
            .    "?&GetKeyVal(#1,'type')(stex:type='&GetKeyVal(#1,'type')')() "
            .    "?&GetKeyVal(#1,'creators')(dc:creators='&GetKeyVal(#1,'creators')')() "
            .    "?&GetKeyVal(#1,'contributors')(dc:contributors='&GetKeyVal(#1,'contributors')')() "
            .    "?&GetKeyVal(#1,'display')(style='display:&GetKeyVal(#1,'display')')() "
	    .    "from='#2'>"
            .    "#body"
            . "</ltx:inline-para>");

1;
