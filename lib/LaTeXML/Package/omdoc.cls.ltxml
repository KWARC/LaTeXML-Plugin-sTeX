# -*- mode: Perl -*-
# /=====================================================================\ #
# | sTeX implementation for LaTeXML (omdoc.cls)                         | #
# | http://github.com/sLaTeX/LaTeXML-Plugin-sTeX/                       | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2019.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <michael.kohlhase@fau.de>                  #_#     | #
# | http://github.com/sLaTeX/sTeX                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use LaTeXML::Util::Pathname;
use Cwd qw(abs_path);

# =======================================================
# 0. Options handling:                                  #
# =======================================================
AssignValue('omdoc@class'=>'article');
DeclareOption('report', sub {AssignValue('omdoc@class' => 'report');
  PassOptions('stex','sty',ToString(Digest(T_CS('\CurrentOption'))));
  PassOptions('omdoc','sty',ToString(Digest(T_CS('\CurrentOption'))));});
DeclareOption('book', sub {AssignValue('omdoc@class' => 'book');
  PassOptions('stex','sty',ToString(Digest(T_CS('\CurrentOption'))));
  PassOptions('omdoc','sty',ToString(Digest(T_CS('\CurrentOption'))));});
DeclareOption(undef, sub  {PassOptions('omdoc@cls','cls',ToString(Digest(T_CS('\CurrentOption'))));
  PassOptions('omdoc','sty',ToString(Digest(T_CS('\CurrentOption'))));
  PassOptions('stex','sty',ToString(Digest(T_CS('\CurrentOption'))));});
ProcessOptions();

# =======================================================
# 1. Requirements:                                      #
# =======================================================
my $class = LookupValue('omdoc@class');
LoadClass($class);
RegisterNamespace('omdoc'=>"http://omdoc.org/ns");
RegisterNamespace('om'=>"http://www.openmath.org/OpenMath");
RegisterNamespace('m'=>"http://www.w3.org/1998/Math/MathML");
RegisterNamespace('dc'=>"http://purl.org/dc/elements/1.1/");
RegisterNamespace('cc'=>"http://creativecommons.org/ns");
RegisterNamespace('stex'=>"http://kwarc.info/ns/sTeX");
RegisterNamespace('ltx'=>"http://dlmf.nist.gov/LaTeXML");
RelaxNGSchema('omdoc+ltxml',
        '#default'=>"http://omdoc.org/ns",
        'om'=>"http://www.openmath.org/OpenMath",
        'm'=>"http://www.w3.org/1998/Math/MathML",
        'dc'=>"http://purl.org/dc/elements/1.1/",
        'cc'=>"http://creativecommons.org/ns",
       'stex'=>"http://kwarc.info/ns/sTeX",
       'ltx'=>"http://dlmf.nist.gov/LaTeXML");
RequirePackage('omdoc');
RequirePackage('stex');

# =======================================================
# 2. Document structure                                 #
# =======================================================
sub xmlBase {
  my $baseuri = LookupValue('URLBASE');
  $baseuri =~ s/\/$//g; # No trailing slashes
  Tokenize($baseuri); }
DefConstructor('\documentkeys RequiredKeyVals:omdoc',
                          sub { activateKeys($_[1]); return; });
sub activateKeys {
  my ($kv) = @_;
  if ($kv) {
    my @pairs = $kv->getPairs();
    while(@pairs) {
       my ($key, $val) = (shift(@pairs), shift(@pairs));
       AssignValue('DOCUMENT'.$key => $val);
   }
 }
return; }
DefEnvironment('{document}',
       "<omdoc:omdoc "
      .    "?&LookupValue('DOCUMENTid')(xml:id='&LookupValue('DOCUMENTid')')"
      .     "(?&Tokenize(&LookupValue('SOURCEBASE'))"
      .      "(xml:id='&Tokenize(&LookupValue('SOURCEBASE')).omdoc')()) "
      .    "?&Tokenize(&LookupValue('URLBASE'))"
      .    "(xml:base='&xmlBase()')()>"
     .  "#body"
      ."</omdoc:omdoc>",
  beforeDigest=> sub { AssignValue(inPreamble=>0); },
  afterDigest=> sub { $_[0]->getGullet->flush; return; },
  afterDigestBegin => sub {
    $_[1]->setProperty(id => LookupValue('DOCUMENTid'));
    if (my $ops = LookupValue('@at@begin@document')) {
      Digest(Tokens(@$ops)); }
    else {
      return; } },
  beforeDigestEnd => sub {
    $_[0]->getGullet->flush;
    if (my $ops = LookupValue('@at@end@document')) {
      Digest(Tokens(@$ops)); }
    else {
      return; } },
  mode => 'text');
Tag('omdoc:omdoc', 'afterOpen:late'=>\&insertFrontMatter,
       afterOpen=>\&numberIt,afterClose=>\&locateIt);

# =======================================================
# 2. Front and Backmatter:                              #
# =======================================================
DefEnvironment('{frontmatter}','#body');
DefEnvironment('{backmatter}','#body');

1;
