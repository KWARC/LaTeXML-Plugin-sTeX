# -*- mode: Perl -*-
# /=====================================================================\ #
# | sTeX implementation for LaTeXML (smultiling.sty)                    | #
# | http://github.com/sLaTeX/LaTeXML-Plugin-sTeX/                       | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2019.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <michael.kohlhase@fau.de>                  #_#     | #
# | http://github.com/sLaTeX/sTeX                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

# =======================================================
# 0. Options handling:                                  #
# =======================================================
DeclareOption('mh', sub { AssignValue ('@smultiling' => 1,'global');
PassOptions('modules','sty',ToString(Digest(T_CS('\CurrentOption')))); });
DeclareOption('langfiles',sub {AssignValue('smultiling_langfiles',1,'global');});
DeclareOption(undef,sub {PassOptions('modules','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();

# =======================================================
# 1. Requirements:                                      #
# =======================================================
if(LookupValue('@smultiling')) {RequirePackage('smultiling-mh');}
RequirePackage('structview');

# =======================================================
# 2. Multilingual Modules:                              #
# =======================================================

# =======================================================
# 2.1 Signatures:                                       #
# =======================================================
RawTeX('
\newenvironment{modsig}[2][]{%
\def\@test{#1}\ifx\@test\@empty\begin{module}[id=#2]\else\begin{module}[id=#2,#1]\fi}
{\end{module}}
\newenvironment{viewsig}[4][]{\def\@test{#1}\ifx\@test\@empty%
\begin{view}[id=#2,ext=tex]{#3}{#4}\else\begin{view}[id=#2,#1,ext=tex]{#3}{#4}\fi}
{\end{view}}
');

# =======================================================
# 2.2 Multilingual Modules:                             #
# =======================================================
DefKeyVal('symi','gfc','Semiverbatim','');
DefKeyVal('symi','ns','Semiverbatim','');
DefKeyVal('symi','align','Semiverbatim','');
DefKeyVal('symi','noalign','Semiverbatim','true');
DefKeyVal('symi','noverb','Semiverbatim','true');
DefKeyVal('symi','specializes','Semiverbatim','');
DefConstructor('\symi OptionalMatch:* OptionalKeyVals:symi {}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#3'/>");
DefConstructor('\symii OptionalMatch:* OptionalKeyVals:symi {}{}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#3-#4'/>");
DefConstructor('\symiii OptionalMatch:* OptionalKeyVals:symi {}{}{}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#3-#4-#5'/>");
DefConstructor('\symiv OptionalMatch:* OptionalKeyVals:symi {}{}{}{}',
     "<omdoc:symbol ?#1(role='primary')(role='secondary') name='#3-#4-#5-#6'/>");
DefKeyVal('modnl','title','Semiverbatim');
DefKeyVal('modnl','load','Semiverbatim');
DefKeyVal('modnl','creators','Semiverbatim');
DefKeyVal('modnl','contributors','Semiverbatim');
DefKeyVal('modnl','primary','Semiverbatim');
DefEnvironment('{modnl} OptionalKeyVals:modnl {}{}',LookupValue('@omdocmode') ? 
         "?#excluded()(<omdoc:theory xml:id='#2.#3'>"
         .   "?&defined(&GetKeyVal(#1,'creators'))(<dc:creator>&GetKeyVal(#1,'creators')</dc:creator>)()"
         .   "?&defined(&GetKeyVal(#1,'title'))(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
         .   "?&defined(&GetKeyVal(#1,'contributors'))(<dc:contributor>&GetKeyVal(#1,'contributors')</dc:contributor>)()"
         .   "<omdoc:imports from='?&GetKeyVal(#1,'load')(&canonical_omdoc_path(&GetKeyVal(#1,'load')))()###2'/>"
         .   "#body"
         . "</omdoc:theory>)" :
         "?#excluded()(<ltx:inline-block class='omdoc_theory' xml:id='#2.#3'>"
#         .   "?&defined(&GetKeyVal(#1,'creators'))(<dc:creator>&GetKeyVal(#1,'creators')</dc:creator>)()"
#         .   "?&defined(&GetKeyVal(#1,'title'))(<dc:title>&GetKeyVal(#1,'title')</dc:title>)()"
#         .   "?&defined(&GetKeyVal(#1,'contributors'))(<dc:contributor>&GetKeyVal(#1,'contributors')</dc:contributor>)()"
         .   "<ltx:inline-block class='omdoc_imports' stex:from='?&GetKeyVal(#1,'load')(&canonical_omdoc_path(&GetKeyVal(#1,'load')))()###2'/>"
         .   "#body"
         . "</ltx:inline-block>)",
  afterDigestBegin=>sub {
    my ($stomach, $whatsit) = @_;
    my $keyval = $whatsit->getArg(1);
    my $signature = ToString($whatsit->getArg(2));
    my $language = ToString($whatsit->getArg(3));
    if ($keyval) {
      # If we're not given load, AND the langfiles option is in effect,
      # default to #2
      if ((! $keyval->getValue('load')) && (LookupValue('smultiling_langfiles'))) {
        $keyval->setValue('load',$signature); }
      # Always load a TeX file
      $keyval->setValue('ext','tex');
      AssignValue('modnl_signature',$signature);
      $keyval->setValue('id',"$signature.$language"); }
    module_afterDigestBegin(@_);
    importmoduleI(@_);
    AssignValue(multiling => 1);
    return; },
  afterDigest =>\&module_afterDigest );
RawTeX('
\newenvironment{viewnl}[5][]{\def\@test{#1}\ifx\@test\@empty%
\begin{viewsketch}[id=#2.#3,ext=tex]{#4}{#5}\else%
\begin{viewsketch}[id=#2.#3,#1,ext=tex]{#4}{#5}\fi}
{\end{viewsketch}}
');

RawTeX('
\newcommand\ttl[1]{\red{TTL: #1}}
');
1;
