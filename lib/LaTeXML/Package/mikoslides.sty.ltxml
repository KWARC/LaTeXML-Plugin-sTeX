# -*- mode: Perl -*-
# /=====================================================================\ #
# | sTeX implementation for LaTeXML (mikoslides.sty)                    | #
# | http://github.com/sLaTeX/LaTeXML-Plugin-sTeX/                       | #
# |=====================================================================| #
# |  Copyright (c) Michael Kohlhase 2019.                               | #
# |  This work may be distributed and/or modified under the conditions  | #
# |  of the LaTeX Project Public License, either version 1.3 of this    | #
# |  license or later; see http://www.latex-project.org/lppl.txt        | # 
# |---------------------------------------------------------------------| #
# | Michael Kohlhase <michael.kohlhase@fau.de>                  #_#     | #
# | http://github.com/sLaTeX/sTeX                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;

# =======================================================
# 0. Options handling:                                  #
# =======================================================
DeclareOption('notes', '');
DeclareOption('slides', '');
DeclareOption('noproblems', '');
DeclareOption('sectocframes', '');
DeclareOption('frameimages', '');
DeclareOption('mh', sub { AssignValue ('@mikoslides' => 1,'global');
                       PassOptions('stex','sty',ToString(Digest(T_CS('\CurrentOption'))));
                       PassOptions('tikzinput','sty',ToString(Digest(T_CS('\CurrentOption'))));});
DeclareOption(undef, sub {PassOptions('stex','sty',ToString(Digest(T_CS('\CurrentOption'))));
                                          PassOptions('tikzinput','sty',ToString(Digest(T_CS('\CurrentOption')))); });
ProcessOptions();
RawTeX('\newif\ifnotes\notesfalse');
RawTeX('\newif\ifproblems\problemsfalse');

# =======================================================
# 1. Requirements:                                      #
# =======================================================
if(LookupValue('@mh')) {RequirePackage('mikoslides-mh');}
RequirePackage('stex');
RequirePackage('smglom');
RequirePackage('tikzinput', options => ['image']);
RequirePackage('amssymb');
RequirePackage('amsmath');
RequirePackage('graphicx');
RequirePackage('url');
DefRegister('\slidewidth'     => Dimension('13.6cm'));
DefRegister('\slideheight'     => Dimension('9cm'));
DefEnvironment('{note}','#body');

# =======================================================
# 2. Notes and slides:                                  #
# =======================================================
DefEnvironment('{frame}[]',
   "<omdoc:omgroup layout='slide'>"
  .  "#body\n"
  ."</omdoc:omgroup>\n\n",
 afterDigestBegin=>sub {
   $_[1]->setProperty(theory=>LookupValue('current_module')); });
DefConstructor('\frametitle{}',
  "\n<omdoc:metadata><dc:title>#1</dc:title></omdoc:metadata>");
DefMacro('\frameimage[]{}','\@frameimage{\includegraphics[#1,width=\slidewidth]{#2}}');
DefConstructor('\@frameimage{}',"<omdoc:omgroup layout='slide'>#1</omdoc:omgroup>\n");
#DefMacro('\defemph{}','{\textcolor{magenta}{#1}}');
#DefMacro('\notemph{}','{\textcolor{magenta}{#1}}');
DefMacro('\textwarning','\@textwarning\xspace');
DefConstructor('\@textwarning',"");
DefMacro('\title[]{}', '\@add@frontmatter{ltx:title}{#1}');
DefMacro('\date[]{}', '\@add@frontmatter{ltx:date}[role=creation]{#1}');
DefMacro('\author[]{}', sub { andSplit(T_CS('\@author'),$_[1]); });
DefEnvironment('{columns}',"#body");
DefEnvironment('{column}{}',"#body");
DefConstructor('\uncover','#1');
#Define a Beamer Overlay Parameter type
DefParameterType('BeamerOverlay', sub {
   my ($gullet) = @_;
   my $tok = $gullet->readXToken;
   if (ref $tok && ToString($tok) eq '<') {
     $gullet->readUntil(T_OTHER('>'));
   } else {
     $gullet->unread($tok) if ref $tok;
     undef; }},
     reversion=> sub {
 (T_OTHER('<'), $_[0]->revert, T_OTHER('>'));
       });

#Take the "from" field of the overlay range
sub overlayFrom {
  return "" unless defined $_[0];
  my $overlay=ToString($_[0]); $overlay =~ /^(\d+)/; $1;}

#Reuse the CMP itemizations, only adjust the \item constructors.
DefMacro('\beamer@group@item[] OptionalBeamerOverlay IfBeginFollows', sub {
  my($gullet,$tag,$overlay,$needwrapper)=@_;
  $overlay=$overlay||T_OTHER("");
  ( T_CS('\group@item@maybe@unwrap'),
    ($needwrapper ? (Invocation(T_CS('\beamer@group@item@wrap'),$tag,$overlay)->unlist) : ()) ); });
DefConstructor('\beamer@group@item@wrap {} OptionalBeamerOverlay',
       "<omdoc:omtext ?#2(overlay='&overlayFrom(#2)')()>"
       . "?#1(<dc:title>#1</dc:title>)()"
             . "<omdoc:CMP>",
       beforeDigest=>sub {
 Let('\group@item@maybe@unwrap','\group@item@unwrap');
 #$_[0]->bgroup;
return; },
       properties=>sub{ RefStepItemCounter(); });
#DefConstructor('\beamer@itemize@item[] OptionalBeamerOverlay',
#       "<omdoc:li ?#2(overlay='&overlayFrom(#2)')() >"
#     . "?#1(<dc:title>#1</dc:title>)()",
#       properties=>sub{ RefStepItemCounter(); });
DefConstructor('\beamer@enumerate@item[] OptionalBeamerOverlay',
       "<omdoc:li ?#2(overlay='&overlayFrom(#2)')() >"
     . "?#1(<dc:title>#1</dc:title>)()",
       properties=>sub{ RefStepItemCounter(); });
DefConstructor('\beamer@description@item[] OptionalBeamerOverlay',
       "<omdoc:di ?#2(overlay='&overlayFrom(#2)')() >"
       . "?#1(<omdoc:dt>#1</omdoc:dt>)()<omdoc:dd>", # trust di and dt to autoclose
       properties=>sub{ RefStepItemCounter(); });

# =======================================================
# 3. Front Matter, Titles, etc                          #
# =======================================================
DefMacro('\putgraphicsat{}{}{}','\mygraphics[#2]{#3}');
DefMacro('\putat{}{}','#2');

# =======================================================
# 4. Problems                                           #
# =======================================================
DefEnvironment('{problems}','#body');
1;
